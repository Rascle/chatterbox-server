1. Continue to use bower to install (and keep track of) all the client-side libraries you use as you work through this server print.

DONE Use npm to install (and keep track of) all the server-side libraries you use as you work through this sprint.

DONE Learn how to use Node to start an HTTP server and how to connect to that
    server with a web browser. (Source code for a bare-bones HTTP server is
    included in the file `server/basic-server.js`.)

4. Learn how to use export and require. Write a proper request handling
    function in the file `server/request-handler.js`. Use export to make this
    function available, and use require to import the function into
    `server/basic-server.js` and use it there.

    1) should respond to GET requests for /log with a 200 status code
    2) should send back parsable stringified JSON
    3) should send back an object
    4) should send an object containing a `results` array
    5) should accept POST requests to /send
    6) should respond with messages that were previously posted
    7) Should 404 when asked for a nonexistent file

5. Make your Node server implement the URLs you used for your chat client
    (eg `/classes/messages`).
    Modify your chat-client code to connect to your Node server instead of
    connecting to Parse. (http://127.0.0.1:3000/ instead of
    https://api.parse.com/1/). Start the server and try out the client!

6. Make all the Mocha tests pass.
    To run Mocha tests for your Node server, you must run npm npm install.
    Run the tests using npm test from the main directory.
    The tests in server/spec/ServerSpec.js expect the handleRequest function in server/request-handler.js to be defined.

A Note About Options Requests

You'll need to make sure you're handling options requests in your router, and sending back appropriate headers, or else ain't nothing gone work .